
#ifndef _ALGORITHM_H_
#define _ALGORITHM_H_

#include "SystemType.h"

/** @file
*
* @defgroup RGB_Algorithm RGB Color Algorithm
* @{
*
* @brief This module converts LIN RGB signal to PWM pulse.
*
* @details This module converts LIN RGB signal to target CIE color,
*          than compensate LED parameters referring to temperature.
*          At last it generates PWM pulse.
*/

/**@brief Parameters this module needed to generate PWM.*/
typedef struct ColorParams
{
  uint16_t colorR;        /**<Color Red.*/
  uint16_t colorG;        /**<Color Green.*/
  uint16_t colorB;        /**<Color Blue.*/
  int16_t  ledTemprature; /**<Current LED junction temperature.*/
  uint16_t factor;        /**<Parameter for adjusting intensity.*/
  uint16_t  intensity;    /**<Intensity.*/
  uint16_t  tempAdjust;   /**<Temperature protection intensity adjusting parameter.*/
}SColorParams;

/**@brief this macro is to enhance the performance of dimming.*/
#define DINTENSITY_ADJUST_SHIFT_LEVEL 6

/**@brief this macro is to enhance the performance of temperature protection dimming.*/
#define DINTENSITY_TEMP_ADJUST_SHIFT_LEVEL 6

/**@brief PWM pulse this module generated.*/
typedef struct PWMParams
{
  uint16_t PWM_R;   /**<PWM Red.*/
  uint16_t PWM_G;   /**<PWM Green.*/
  uint16_t PWM_B;   /**<PWM Blue.*/
}SPWMParams;

/** update flag**/
typedef union 
{
  uint8_t byte;
  struct 
  {
    uint8_t TemperatureF            :1;
    uint8_t TemperaturebackFlag     :1;
    uint8_t ColorUpdate             :1;
    uint8_t ColorUpdatebackFlag     :1;
    uint8_t IntensityF              :1; 
    uint8_t IntensitybakF           :1; 
    uint8_t ReservedFlag            :2; 
    // uint8_t ReservedFlag            :1;    
  }bits;
}AlgorithmUpdate;
extern  volatile AlgorithmUpdate   UpdateFlag;
#define AlgorithmUpdateFlag        UpdateFlag.byte
#define TemperatureFlag            UpdateFlag.bits.TemperatureF
#define IntensityFlag              UpdateFlag.bits.IntensityF
#define IntensitybakFlag           UpdateFlag.bits.IntensitybakF
#define ColorUpdateINITFlag            UpdateFlag.bits.ColorUpdate

/**
*@details   Update red led parameter.
*
*@note      The intensity(Y) value only have 40% of normal intensity for our float LIB has limitation.
*
*@param[in] x  red x coordinate in CIE color. This value has been multiplied by 10000.
*
*@param[in] y  red y coordinate in CIE color. This value has been multiplied by 10000.
*
*@param[in] Y  red Luminous in CIE color. This value has been multiplied by 10000.
*
*@retval    None.
*/
void algoUpdateRedCIE(int16_t x, int16_t y, int32_t Y);

/**
*@details   Update green led parameter.
*
*@note      The intensity(Y) value only have 40% of normal intensity for our float LIB has limitation.
*
*@param[in] x  green x coordinate in CIE color. This value has been multiplied by 10000.
*
*@param[in] y  green y coordinate in CIE color. This value has been multiplied by 10000.
*
*@param[in] Y  green Luminous in CIE color. This value has been multiplied by 10000.
*
*@retval    None.
*/
void algoUpdateGreenCIE(int16_t x, int16_t y, int32_t Y);

/**
*@details   Update blue led parameter.
*
*@note      The intensity(Y) value only have 40% of normal intensity for our float LIB has limitation.
*
*@param[in] x  blue x coordinate in CIE color. This value has been multiplied by 10000.
*
*@param[in] y  blue y coordinate in CIE color. This value has been multiplied by 10000.
*
*@param[in] Y  blue Luminous in CIE color. This value has been multiplied by 10000.
*
*@retval    None.
*/
void algoUpdateBlueCIE(int16_t x, int16_t y, int32_t Y);

/**
*@details   The raw R,G,B signals from LIN bus need to be fixed first. This function fix only R, G, B.
*
*@param[in&out] rawColor  The raw LIN signal.
*
*@retval    None.
*/
void algoGetFixedRGB(SColorParams *rawColor);

/**
*@details   Generate PWM pulse.
*
*@param[in] inputColor  Algorithm input parameters.
*
*@param[out] outputPWM  PWM generated by algorithm.
*
*@retval    if this input color can be mixed by our led.
*/
bool_t algoGetPWMOutput(SColorParams * const inputColor, SPWMParams *outputPWM);

/** @} */

#endif
